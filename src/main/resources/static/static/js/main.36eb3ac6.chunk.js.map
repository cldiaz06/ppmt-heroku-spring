{"version":3,"sources":["actions/ProjectActions.js","actions/Types.js","Components/Project/ProjectItem.js","Components/Project/CreateProjectButton.js","Components/Dashboard.js","SecurityUtils/securityUtils.js","actions/SecurityActions.js","Components/Layout/Header.js","Components/Project/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","Components/Project/UpdateProject.js","Components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/BacklogActions.js","Components/ProjectBoard/Backlog.js","Components/ProjectBoard/ProjectBoard.js","Components/ProjectBoard/ProjectTasks/AddProjectTask.js","Components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","Components/Layout/Landing.js","Components/UserManagement/Register.js","Components/UserManagement/Login.js","SecurityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","async","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","delProject","this","className","projectIdentifier","projectName","projDescription","to","onClick","bind","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","setJWToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsAuthenticated","fullname","userNotAuthenticated","data-toggle","data-target","AddProject","onChange","onSubmit","nextProps","errors","setState","e","target","name","value","preventDefault","newProj","startDate","endDate","classnames","placeholder","initState","initialState","project_tasks","project_task","booleanActionPayload","combineReducers","action","filter","backlog","projSequence","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","match","params","getProject","updateProject","disabled","ProjectTask","backlog_id","ptid","delProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","ptId","Backlog","tasks","project_tasks_props","todoItems","inProgressitems","doneItems","i","length","status","ProjectBoard","getBacklog","boardContent","projectNotFound","role","boardAlgorithm","AddProjectTask","newProjTask","acceptCriteria","dueDate","addProjectTask","UpdateProjectTask","createDate","getProjectTask","updateProjTask","updateProjectTask","patch","Landing","Register","newUser","username","fullName","password","confirmPassword","createNewUser","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","jwtToken","decoded_jwtToken","currTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"yVAIaA,EAAgB,SAACC,EAASC,GAAV,OAAsB,SAAMC,GAAN,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAErCE,IAAMC,KACP,eAAgBN,IAHsB,OAIvCC,EAAQM,KAAK,cACbL,EAAS,CACLM,KCTU,aDUVC,QAAQ,KAP2B,gDAU3CP,EAAS,CACLM,KCdc,aDedC,QAAQ,KAAMC,SAASC,OAZgB,kEEE7CC,E,2MACFC,cAAgB,SAAAC,GACZ,EAAKC,MAAMC,WAAWF,I,wEAGhB,IAECd,EAAWiB,KAAKF,MAAhBf,QACP,OACI,yBAAKkB,UAAU,aACX,yBAAKA,UAAU,gCACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,WAAWlB,EAAQmB,oBAEvC,yBAAKD,UAAU,2BACX,4BAAKlB,EAAQoB,aACb,2BAAIpB,EAAQqB,kBAEhB,yBAAKH,UAAU,8BACX,wBAAIA,UAAU,cACV,kBAAC,IAAD,CAAMI,GAAE,wBAAmBtB,EAAQmB,oBAC/B,wBAAID,UAAU,yBACV,uBAAGA,UAAU,6BAAb,qBAGR,kBAAC,IAAD,CAAMI,GAAE,yBAAoBtB,EAAQmB,oBAChC,wBAAID,UAAU,0BACV,uBAAGA,UAAU,mBAAb,0BAGR,wBAAIA,UAAU,yBACVK,QAASN,KAAKJ,cAAcW,KAAKP,KAAMjB,EAAQmB,oBAC/C,uBAAGD,UAAU,2BAAb,6B,GAjCVO,aAgDXC,cAAQ,KAAM,CAACV,WFXJ,SAACF,GAAD,OAAQ,SAAMZ,GAAN,SAAAC,EAAAC,OAAA,oDAC3BuB,OAAOC,QAAQ,iDADY,kCAAAzB,EAAA,MAEpBE,IAAMwB,OAAN,uBAA6Bf,KAFT,OAG1BZ,EAAS,CACLM,KC3Ce,cD4CfC,QAASK,IALa,wCEWnBY,CAA4Bd,GCzC5BkB,EAVa,WACxB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAMT,GAAG,cAAcJ,UAAU,uBAAjC,sBCCNc,E,4LAGEf,KAAKF,MAAMkB,gB,+BAGL,IACCC,EAAYjB,KAAKF,MAAMf,QAAvBkC,SAEP,OACI,yBAAKhB,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,YACI,6BACA,kBAAC,EAAD,MACA,6BACJ,6BACCgB,EAASC,KAAI,SAAAnC,GAAO,OACjB,kBAAC,EAAD,CAAaoC,IAAKpC,EAAQc,GAAId,QAASA,e,GApB/CyB,aA0CTC,eALS,SAAAW,GAAK,MAAK,CAC9BrC,QAASqC,EAAMrC,WAIqB,CAACiC,YJ3Bd,kBAAM,SAAM/B,GAAN,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACXE,IAAMiC,IAAI,qBADC,OACvBC,EADuB,OAE7BrC,EAAS,CACLM,KCvBoB,eDwBpBC,QAAS8B,EAAI5B,OAJY,wCI2BlBe,CAAwCM,GCvCxCQ,EARI,SAAAC,GACZA,EACCpC,IAAMqC,SAASC,QAAQC,OAAvB,cAAiDH,SAE1CpC,IAAMqC,SAASC,QAAQC,OAAvB,e,iBC0CFC,EAAS,kBAAM,SAAA3C,GACxB4C,aAAaC,WAAW,YACxBP,GAAW,GACXtC,EAAS,CACLM,KLxCwB,mBKyCxBC,QAAS,OC/CXuC,E,iLAGE/B,KAAKF,MAAM8B,SACXlB,OAAOsB,SAASC,KAAO,M,+BAGjB,IA+CFC,EA/CC,EAEsBlC,KAAKF,MAAMqC,SAA/BC,EAFF,EAEEA,WAAYC,EAFd,EAEcA,KAEbC,EACD,yBAAKrC,UAAY,2BAA2BJ,GAAK,cAC9C,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,cAA9B,eAMR,wBAAIJ,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,YAAYI,GAAG,cAC3B,uBAAGJ,UAAU,4BADjB,KAC+CoC,EAAKE,WAGxD,wBAAItC,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UACvBC,QAASN,KAAK4B,OAAOrB,KAAKP,OADjC,aASVwC,EACF,yBAAKvC,UAAU,2BAA2BJ,GAAG,cACzC,wBAAII,UAAU,sBACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,YAAYI,GAAG,aAA/B,YAIJ,wBAAIJ,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,UAA9B,YAgBhB,OALI6B,EADDE,GAAcC,EACCC,EAEAE,EAId,yBAAKvC,UAAU,uDACf,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMA,UAAU,eAAeI,GAAG,KAAlC,oCAGA,4BAAQJ,UAAU,iBAAiBV,KAAK,SAASkD,cAAY,WAAWC,cAAY,eAChF,0BAAMzC,UAAU,yBAEnBiC,Q,GAvEI1B,aAwFNC,eAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGoB,CAACP,UAA1BnB,CAAmCsB,G,iDCxF5CY,E,YACF,aAAc,IAAD,8BACT,+CACKvB,MAAM,CACP,YAAe,GACf,kBAAqB,GACrB,gBAAmB,GACnB,UAAa,GACb,QAAW,GACX,OAAS,IAGb,EAAKwB,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBAZP,E,uFAeauC,GACnBA,EAAUC,QACT/C,KAAKgD,SAAS,CACVD,OAAOD,EAAUC,W,+BAKpBE,GACLjD,KAAKgD,SAAL,eACKC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAIzBH,GAELA,EAAEI,iBACF,IAAMC,EAAU,CACZ,YAAetD,KAAKoB,MAAMjB,YAC1B,kBAAqBH,KAAKoB,MAAMlB,kBAChC,gBAAmBF,KAAKoB,MAAMhB,gBAC9B,UAAaJ,KAAKoB,MAAMmC,UACxB,QAAWvD,KAAKoB,MAAMoC,SAE1BxD,KAAKF,MAAMhB,cAAcwE,EAAStD,KAAKF,MAAMd,W,+BAGvC,IAEA+D,EAAU/C,KAAKoB,MAAf2B,OACN,OACI,6BACI,yBAAK9C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,uBACA,6BACA,0BAAM4C,SAAU7C,KAAK6C,UACjB,yBAAK5C,UAAU,cACZ,2BAAOV,KAAK,OACXU,UAAWwD,IAAW,+BAAgC,CAClD,aAAaV,EAAO5C,cAExBuD,YAAY,eAAeP,KAAK,cAChCC,MAAOpD,KAAKoB,MAAMjB,YAClByC,SAAU5C,KAAK4C,WACdG,EAAO5C,aACJ,yBAAKF,UAAU,oBACV8C,EAAO5C,cAIpB,yBAAKF,UAAU,cACX,2BAAOV,KAAK,OACZU,UAAWwD,IAAW,+BAA+B,CACjD,aAAaV,EAAO7C,oBAExBwD,YAAY,oBAAoBP,KAAK,oBACrCC,MAAOpD,KAAKoB,MAAMlB,kBAClB0C,SAAU5C,KAAK4C,WACdG,EAAO7C,mBACJ,yBAAKD,UAAU,oBACV8C,EAAO7C,oBAKpB,yBAAKD,UAAU,cACX,8BACCA,UAAWwD,IAAW,+BAA+B,CACjD,aAAaV,EAAO3C,kBAExBsD,YAAY,sBAAsBP,KAAK,kBACvCC,MAAOpD,KAAKoB,MAAMhB,gBAClBwC,SAAU5C,KAAK4C,WACdG,EAAO3C,iBACJ,yBAAKH,UAAU,oBACV8C,EAAO3C,kBAIrB,0CACA,yBAAKH,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAC7BkD,KAAK,YAAYC,MAAOpD,KAAKoB,MAAMmC,UACnCX,SAAU5C,KAAK4C,YAEnB,kDACA,yBAAK3C,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAC7BkD,KAAK,UAAUC,MAAOpD,KAAKoB,MAAMoC,QACjCZ,SAAU5C,KAAK4C,YAGnB,2BAAOrD,KAAK,SAASU,UAAU,6C,GA/G1CO,aAoIVC,eALS,SAAAW,GAAK,MAAI,CAC7B2B,OAAQ3B,EAAM2B,UAIsB,CAACjE,iBAA1B2B,CAA0CkC,G,gBCxInDgB,EAAY,G,QCAZC,EAAe,CACjB3C,SAAS,GACTlC,QAAQ,ICGN6E,EAAe,CACjBC,cAAe,GACfC,aAAc,ICPZF,EAAe,CACjBxB,YAAY,EACZC,KAAM,IAGJ0B,EAAuB,SAAAvE,GACzB,QAAGA,GCCQwE,cAAgB,CAC3BjB,OJNW,WAAkC,IAAzB3B,EAAwB,uDAAlBuC,EAAWM,EAAO,uCAC5C,OAAOA,EAAO1E,MAEV,IRNkB,aQOd,OAAO0E,EAAOzE,QAElB,QACI,OAAO4B,IIAfrC,QHJW,WAAuC,IAA9BqC,EAA6B,uDAArBwC,EAAcK,EAAO,uCACjD,OAAOA,EAAO1E,MACV,ITPoB,eSQhB,OAAO,eACA6B,EADP,CAEIH,SAAUgD,EAAOzE,UAEzB,ITXmB,cSYf,OAAO,eACA4B,EADP,CAEIrC,QAASkF,EAAOzE,UAExB,ITfmB,cSgBf,sBACO4B,EADP,CAEIH,SAAUG,EAAMH,SAASiD,QACrB,SAAAnF,GAAO,OAAIA,EAAQmB,oBAAsB+D,EAAOzE,aAG5D,QACI,OAAO4B,IGff+C,QFAW,WAAyC,IAA/B/C,EAA8B,uDAAtBwC,EAAcK,EAAQ,uCACnD,OAAQA,EAAO1E,MAEX,IVRmB,cUSf,OAAO,eACA6B,EADP,CAEIyC,cAAeI,EAAOzE,UAG9B,IVbwB,mBUcpB,OAAO,eACA4B,EADP,CAEI0C,aAAcG,EAAOzE,UAG7B,IVlB2B,mBUmBvB,OAAO,eACA4B,EADP,CAEIyC,cAAezC,EAAMyC,cAAcK,QAC/B,SAAAJ,GAAY,OAAGA,EAAaM,eAAiBH,EAAOzE,aAIhE,QACI,OAAO4B,IEvBfe,SDEW,WAAsC,IAA7Bf,EAA4B,uDAArBwC,EAAcK,EAAO,uCAChD,OAAQA,EAAO1E,MAEX,IXNwB,mBWOpB,OAAO,eACA6B,EADP,CAEIgB,WAAY2B,EAAqBE,EAAOzE,SACxC6C,KAAM4B,EAAOzE,UAErB,QACI,OAAO4B,MErBbwC,EAAe,GACfS,EAAa,CAACC,KAIdC,EAAqB7D,OAAO8D,8BAC9B9D,OAAO8D,+BAwBIC,EAtBX/D,OAAOgE,UAAUC,UAAUC,SAAS,WAAaL,EACzCM,YACJC,EACAlB,EACAmB,YACIC,IAAe,WAAf,EAAmBX,GACnBE,IAIAM,YACJC,EACAlB,EACAmB,YAAQC,IAAe,WAAf,EAAmBX,KCnB7BY,E,YAEF,aAAc,IAAD,8BACT,+CACK7D,MAAQ,CACT,GAAK,GACL,YAAe,GACf,kBAAqB,GACrB,gBAAmB,GACnB,UAAa,GACb,QAAW,GACX2B,OAAO,IAGX,EAAKH,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBAbP,E,uFAiBauC,GACnBA,EAAUC,QACT/C,KAAKgD,SAAS,CAACD,OAAQD,EAAUC,SAFL,MAW5BD,EAAU/D,QANVc,EAL4B,EAK5BA,GACAM,EAN4B,EAM5BA,YACAD,EAP4B,EAO5BA,kBACAE,EAR4B,EAQ5BA,gBACAmD,EAT4B,EAS5BA,UACAC,EAV4B,EAU5BA,QAGJxD,KAAKgD,SAAS,CACVnD,KACAM,cACAD,oBACAE,kBACAmD,YACAC,c,0CAIY,IACT3D,EAAMG,KAAKF,MAAMoF,MAAMC,OAAvBtF,GACPG,KAAKF,MAAMsF,WAAWvF,EAAIG,KAAKF,MAAMd,W,+BAGhCiE,GACLjD,KAAKgD,SAAL,eAAgBC,EAAEC,OAAOC,KAAMF,EAAEC,OAAOE,U,+BAGnCH,GACLA,EAAEI,iBACF,IAAMgC,EAAgB,CAClBxF,GAAIG,KAAKoB,MAAMvB,GACfM,YAAaH,KAAKoB,MAAMjB,YACxBD,kBAAmBF,KAAKoB,MAAMlB,kBAC9BE,gBAAiBJ,KAAKoB,MAAMhB,gBAC5BmD,UAAWvD,KAAKoB,MAAMmC,UACtBC,QAASxD,KAAKoB,MAAMoC,SAGxBxD,KAAKF,MAAMhB,cAAcuG,EAAerF,KAAKF,MAAMd,W,+BAG7C,IACC+D,EAAU/C,KAAKoB,MAAf2B,OACP,OACI,yBAAK9C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,wBACA,6BACA,0BAAM4C,SAAU7C,KAAK6C,UACjB,yBAAK5C,UAAU,cACX,2BAAOV,KAAK,OACZU,UAAWwD,IAAW,gCAAgC,CAClD,aAAaV,EAAO5C,cAExBuD,YAAY,eACZP,KAAK,cACLC,MAAOpD,KAAKoB,MAAMjB,YAClByC,SAAU5C,KAAK4C,WACXG,EAAO5C,aACP,yBAAKF,UAAU,oBAAoB8C,EAAO5C,cAGlD,yBAAKF,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAA+ByD,YAAY,oBACvEP,KAAK,oBACLC,MAAOpD,KAAKoB,MAAMlB,kBACfoF,UAAQ,KAEhB,yBAAKrF,UAAU,cACX,8BACAA,UAAWwD,IAAW,+BAA+B,CACjD,aAAaV,EAAO3C,kBACpBsD,YAAY,sBAChBP,KAAK,kBACLC,MAAOpD,KAAKoB,MAAMhB,gBAClBwC,SAAU5C,KAAK4C,WACdG,EAAO3C,iBACA,yBAAKH,UAAU,oBAAoB8C,EAAO3C,kBAGtD,0CACA,yBAAKH,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAC7BkD,KAAK,YACLC,MAAOpD,KAAKoB,MAAMmC,UAClBX,SAAU5C,KAAK4C,YAEnB,kDACA,yBAAK3C,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAC7BkD,KAAK,UACLC,MAAOpD,KAAKoB,MAAMoC,QAClBZ,SAAU5C,KAAK4C,YAEnB,2BAAOrD,KAAK,SAASU,UAAU,4C,GAxHnCO,aA8IbC,eALS,SAAAW,GAAK,MAAK,CAC9BrC,QAASqC,EAAMrC,QAAQA,QACvBgE,OAAQ3B,EAAM2B,UAGqB,CAACqC,WftHd,SAACvF,EAAIb,GAAL,OAAiB,SAAMC,GAAN,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEjBE,IAAMiC,IAAN,uBAA0BxB,KAFT,OAE7ByB,EAF6B,OAGnCrC,EAAS,CACLM,KC/Be,cDgCfC,QAAS8B,EAAI5B,OALkB,gDAQnCV,EAAQM,KAAK,cARsB,0DesHSR,iBAArC2B,CAAqDwE,GC9I9DM,E,sLAEYC,EAAYC,GACtBzF,KAAKF,MAAM4F,eAAeF,EAAWC,K,+BAG/B,IAIFE,EACAC,EAHG9B,EAAgB9D,KAAKF,MAArBgE,aAoBP,OAf6B,IAA1BA,EAAa+B,WACZD,EAAgB,uBAChBD,EAAiB,QAES,IAA1B7B,EAAa+B,WACbD,EAAgB,wBAChBD,EAAiB,UAGS,IAA1B7B,EAAa+B,WACbD,EAAgB,qBAChBD,EAAiB,OAKjB,6BACI,yBAAK1F,UAAU,sBACX,yBAAKA,UAAS,mCAA8B2F,IAA5C,OACS9B,EAAaM,aADtB,iBACkDuB,GAElD,yBAAK1F,UAAU,sBACX,wBAAIA,UAAU,cAAc6D,EAAagC,SACzC,uBAAG7F,UAAU,4BACR6D,EAAaiC,oBAElB,kBAAC,IAAD,CAAM1F,GAAE,6BAAwByD,EAAa5D,kBAArC,YAA0D4D,EAAaM,cAC7EnE,UAAU,mBADZ,iBAGA,4BAAQA,UAAU,sBAClBK,QAASN,KAAKJ,cAAcW,KAAKP,KAAK8D,EAAa5D,kBACf4D,EAAaM,eAFjD,iB,GA1CE5D,aAwDXC,cAAQ,KAAK,CAACiF,eCEC,SAACF,EAAYQ,GAAb,OAAsB,SAAM/G,GAAN,SAAAC,EAAAC,OAAA,oDAC5CuB,OAAOC,QAAP,gCAAwCqF,EAAxC,wCAD4C,kCAAA9G,EAAA,MAEtCE,IAAMwB,OAAN,uBAA6B4E,EAA7B,YAA2CQ,KAFL,OAG5C/G,EAAS,CACLM,KhB3DuB,mBgB4DvBC,QAASwG,IAL+B,wCDFrCvF,CAA+B8E,GEE/BU,G,iLAhDP,IAZM,IAIAC,EAFuBlG,KAAKF,MAA3BqG,oBAE2BjF,KAAI,SAAA4C,GAAY,OAC9C,kBAAC,EAAD,CAAa3C,IAAK2C,EAAajE,GAAIiE,aAAcA,OAGjDsC,EAAY,GACZC,EAAkB,GAClBC,EAAY,GAERC,EAAE,EAAGA,EAAEL,EAAMM,OAAQD,IAEiB,UAAvCL,EAAMK,GAAGzG,MAAMgE,aAAa2C,QAC3BL,EAAU9G,KAAK4G,EAAMK,IAEkB,gBAAvCL,EAAMK,GAAGzG,MAAMgE,aAAa2C,QAC5BJ,EAAgB/G,KAAK4G,EAAMK,IAEY,SAAvCL,EAAMK,GAAGzG,MAAMgE,aAAa2C,QAC5BH,EAAUhH,KAAK4G,EAAMK,IAI7B,OACI,6BACI,yBAAKtG,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,uCACX,uCAGPmG,GAEL,yBAAKnG,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,qCACX,6CAGPoG,GAEL,yBAAKpG,UAAU,YACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,qCACX,sCAGPqG,U,GApDP9F,aCIhBkG,G,YACH,aAAc,IAAD,8BACT,+CACKtF,MAAM,CACP2B,OAAO,IAHF,E,iFAOQ,IACTlD,EAAMG,KAAKF,MAAMoF,MAAMC,OAAvBtF,GACPG,KAAKF,MAAM6G,WAAW9G,K,gDAGAiD,GACnBA,EAAUC,QACT/C,KAAKgD,SAAS,CAACD,OAAQD,EAAUC,W,+BAI/B,IAKF6D,EAJG/G,EAAMG,KAAKF,MAAMoF,MAAMC,OAAvBtF,GACAgE,EAAiB7D,KAAKF,MAAMqE,QAA5BN,cAoCP,OAFA+C,EA9BuB,SAAC7D,EAAQc,GAC5B,OAAIA,EAAc2C,OAAO,EACjBzD,EAAO8D,gBAEH,yBAAK5G,UAAU,iCAAiC6G,KAAK,SAChD/D,EAAO8D,iBAIX9D,EAAO7C,kBAER,yBAAKD,UAAU,iCAAiC6G,KAAK,SAChD/D,EAAO7C,mBAOZ,yBAAKD,UAAU,+BAA+B6G,KAAK,SAAnD,wCAOD,kBAAC,GAAD,CAASX,oBAAqBtC,IAI9BkD,CAjCE/G,KAAKoB,MAAf2B,OAiC+Bc,GAGlC,6BACI,yBAAK5D,UAAU,aACX,kBAAC,IAAD,CAAMI,GAAE,0BAAqBR,GAAMI,UAAU,wBACzC,uBAAGA,UAAU,sBAAb,yBAEJ,6BACA,6BACC2G,Q,GAjEMpG,aAmFZC,gBALS,SAAAW,GAAK,MAAK,CAC9B+C,QAAS/C,EAAM+C,QACfpB,OAAQ3B,EAAM2B,UAGsB,CAAC4D,WFrEf,SAAAnB,GAAU,OAAI,SAAMvG,GAAN,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEdE,IAAMiC,IAAN,uBAA0BmE,KAFZ,OAE1BlE,EAF0B,OAGhCrC,EAAS,CACLM,KhBlBe,cgBmBfC,QAAS8B,EAAI5B,OALe,gDAQhCT,EAAS,CACLM,KhB7Bc,agB8BdC,QAAS,KAAIC,SAASC,OAVM,2DEqEzBe,CAAuCiG,ICnFhDM,G,YAEF,WAAYlH,GAAO,IAAD,0BAGPD,GAFP,4CAAMC,KAEYA,MAAMoF,MAAMC,OAAvBtF,GAHO,OAKd,EAAKuB,MAAQ,CACT,QAAW,GACX,eAAkB,GAClB,OAAU,GACV,SAAY,EACZ,QAAW,GACX,kBAAoBvB,EACpB,OAAS,IAGb,EAAK+C,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBAhBF,E,uFAmBQuC,GAClBA,EAAUC,QACV/C,KAAKgD,SAAS,CACVD,OAAQD,EAAUC,W,+BAKrBE,GACLjD,KAAKgD,SAAL,eACKC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAIzBH,GACLA,EAAEI,iBACF,IAAM4D,EAAc,CAChB,QAAWjH,KAAKoB,MAAM0E,QACtB,eAAkB9F,KAAKoB,MAAM8F,eAC7B,OAAUlH,KAAKoB,MAAMqF,OACrB,SAAYzG,KAAKoB,MAAMyE,SACvB,QAAW7F,KAAKoB,MAAM+F,SAG1BnH,KAAKF,MAAMsH,eAAepH,KAAKoB,MAAMlB,kBAAmB+G,EAAajH,KAAKF,MAAMd,W,+BAG1E,IACE+D,EAAW/C,KAAKoB,MAAhB2B,OAER,OACQ,6BAIA,yBAAK9C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBL,KAAKoB,MAAMlB,mBAAqBD,UAAU,iBAArE,yBAGA,wBAAIA,UAAU,yBAAd,oBACA,uBAAGA,UAAU,oBAAb,+BACA,0BAAM4C,SAAU7C,KAAK6C,UACjB,yBAAK5C,UAAU,cACX,2BAAOV,KAAK,OACTU,UAAWwD,IAAW,+BAA+B,CACjD,aAAcV,EAAO+C,UACrB3C,KAAK,UACRO,YAAY,uBAAuBN,MAAOpD,KAAKoB,MAAM0E,QACrDlD,SAAU5C,KAAK4C,WAChBG,EAAO+C,SACF,yBAAK7F,UAAU,oBACd8C,EAAO+C,UAIpB,yBAAK7F,UAAU,cACX,8BAAUA,UAAU,+BAChByD,YAAY,sBAAsBP,KAAK,iBACvCC,MAAOpD,KAAKoB,MAAM8F,eAAgBtE,SAAU5C,KAAK4C,YAGzD,wCACA,yBAAK3C,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAA+BkD,KAAK,UAC7DC,MAAOpD,KAAKoB,MAAM+F,QAASvE,SAAU5C,KAAK4C,YAElD,yBAAK3C,UAAU,cACP,4BAAQA,UAAU,+BAA+BkD,KAAK,WACtDC,MAAOpD,KAAKoB,MAAMyE,SAAUjD,SAAU5C,KAAK4C,UAC3C,4BAAQQ,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKnD,UAAU,cACP,4BAAQA,UAAU,+BAA+BkD,KAAK,SACtDC,MAAOpD,KAAKoB,MAAMqF,OAAQ7D,SAAU5C,KAAK4C,UACzC,4BAAQQ,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BAAO7D,KAAK,SAASU,UAAU,6C,GA9GtCO,aAsIdC,gBALS,SAAAW,GAAK,MAAK,CAC9B2B,OAAQ3B,EAAM2B,UAIsB,CAACqE,eH1IX,SAAC5B,EAAY1B,EAAc9E,GAA3B,OAAuC,SAAMC,GAAN,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGvDE,IAAMC,KAAN,uBAA2BmG,GAAc1B,IAHc,OAI7D9E,EAAQM,KAAR,wBAA8BkG,IAC9BvG,EAAS,CACLM,KhBRc,agBSdC,QAAS,KAPgD,gDAU7DP,EAAS,CACLM,KhBbc,agBcdC,QAAS,KAAIC,SAASC,OAZmC,2DG0ItDe,CAA2CuG,ICtIpDK,G,YAEF,aAAe,IAAD,8BACV,+CACKjG,MAAQ,CACTvB,GAAI,GACJuE,aAAc,GACd0B,QAAS,GACToB,eAAgB,GAChBT,OAAQ,GACRZ,SAAU,GACVsB,QAAS,GACTjH,kBAAmB,GACnBoH,WAAY,GACZvE,OAAO,IAGX,EAAKH,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBAhBN,E,uFAmBYuC,GAEnBA,EAAUC,QACT/C,KAAKgD,SAAS,CAACD,OAAQD,EAAUC,SAHL,MAgB5BD,EAAUgB,aATVjE,EAP4B,EAO5BA,GACAuE,EAR4B,EAQ5BA,aACA0B,EAT4B,EAS5BA,QACAoB,EAV4B,EAU5BA,eACAT,EAX4B,EAW5BA,OACAZ,EAZ4B,EAY5BA,SACAsB,EAb4B,EAa5BA,QACAjH,EAd4B,EAc5BA,kBACAoH,EAf4B,EAe5BA,WAGJtH,KAAKgD,SAAS,CACVnD,KACAuE,eACA0B,UACAoB,iBACAT,SACAZ,WACAsB,UACAjH,oBACAoH,iB,0CAIY,IAAD,EACYtH,KAAKF,MAAMoF,MAAMC,OAArCK,EADQ,EACRA,WAAYQ,EADJ,EACIA,KACnBhG,KAAKF,MAAMyH,eAAe/B,EAAYQ,EAAMhG,KAAKF,MAAMd,W,+BAGlDiE,GACLjD,KAAKgD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGrCH,GACLA,EAAEI,iBAEF,IAAMmE,EAAkB,CACpB3H,GAAIG,KAAKoB,MAAMvB,GACfuE,aAAcpE,KAAKoB,MAAMgD,aACzB0B,QAAS9F,KAAKoB,MAAM0E,QACpBoB,eAAgBlH,KAAKoB,MAAM8F,eAC3BT,OAAQzG,KAAKoB,MAAMqF,OACnBZ,SAAU7F,KAAKoB,MAAMyE,SACrBsB,QAASnH,KAAKoB,MAAM+F,QACpBjH,kBAAmBF,KAAKoB,MAAMlB,kBAC9BoH,WAAYtH,KAAKoB,MAAMkG,YAK3BtH,KAAKF,MAAM2H,kBACPzH,KAAKoB,MAAMlB,kBACXF,KAAKoB,MAAMgD,aACXoD,EACAxH,KAAKF,MAAMd,W,+BAIT,IACC+D,EAAU/C,KAAKoB,MAAf2B,OAGP,OACI,6BACI,yBAAK9C,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMI,GAAE,wBAAmBL,KAAKoB,MAAMlB,mBAAoBD,UAAU,iBAApE,yBAGA,wBAAIA,UAAU,yBAAd,uBACA,uBAAGA,UAAU,oBAAb,iBACmBD,KAAKoB,MAAMlB,kBAD9B,sBAEqB,IAFrB,IAE2BF,KAAKoB,MAAMgD,cACtC,0BAAMvB,SAAU7C,KAAK6C,UACjB,yBAAK5C,UAAU,cACX,2BAAOV,KAAK,OACRU,UAAWwD,IAAW,+BAA+B,CACjD,aAAcV,EAAO+C,UAE5B3C,KAAK,UAAUC,MAAOpD,KAAKoB,MAAM0E,QACjClD,SAAY5C,KAAK4C,SACjBc,YAAY,yBACTX,EAAO+C,SACH,yBAAK7F,UAAU,oBACV8C,EAAO+C,UAIxB,yBAAK7F,UAAU,cACX,8BAAUA,UAAU,+BACnByD,YAAY,sBACTP,KAAK,iBAAgBC,MAAOpD,KAAKoB,MAAM8F,eACvCtE,SAAU5C,KAAK4C,YAEvB,wCACA,yBAAK3C,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAU,+BAC5BkD,KAAK,UAAUC,MAAOpD,KAAKoB,MAAM+F,QACjCvE,SAAW5C,KAAK4C,YAErB,yBAAK3C,UAAU,cACX,4BAAQA,UAAU,+BACjBkD,KAAK,WAAWC,MAAOpD,KAAKoB,MAAMyE,SAClCjD,SAAU5C,KAAK4C,UACZ,4BAAQQ,MAAO,GAAf,mBACA,4BAAQA,MAAO,GAAf,QACA,4BAAQA,MAAO,GAAf,UACA,4BAAQA,MAAO,GAAf,SAIR,yBAAKnD,UAAU,cACX,4BAAQA,UAAU,+BAA+BkD,KAAK,SACrDC,MAAOpD,KAAKoB,MAAMqF,OAAQ7D,SAAU5C,KAAK4C,UACtC,4BAAQQ,MAAM,IAAd,iBACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,UAIR,2BAAO7D,KAAK,SAASU,UAAU,6C,GAvJnCO,aA8KjBC,gBALS,SAAAW,GAAK,MAAK,CAC9B0C,aAAc1C,EAAM+C,QAAQL,aAC5Bf,OAAQ3B,EAAM2B,UAGsB,CAAEwE,eJjJb,SAAC/B,EAAYQ,EAAMhH,GAAnB,OAA+B,SAAMC,GAAN,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAElCE,IAAMiC,IAAN,uBAA0BmE,EAA1B,YAAwCQ,KAFN,OAE9C1E,EAF8C,OAGpDrC,EAAS,CACLM,KhBhCoB,mBgBiCpBC,QAAS8B,EAAI5B,OALmC,gDAQpDV,EAAQM,KAAK,cARuC,0DIiJFmI,kBJrIzB,SAACjC,EAAYQ,EAAMlC,EAAc9E,GAAjC,OAA6C,SAAOC,GAAP,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEhEE,IAAMsI,MAAN,uBAA4BlC,EAA5B,YAA0CQ,GAAQlC,IAFc,OAGtE9E,EAAQM,KAAR,wBAA8BkG,IAC9BvG,EAAS,CACLM,KhBpDc,agBqDdC,QAAQ,KAN0D,gDAStEP,EAAS,CACLM,KhBzDc,agB0DdC,QAAU,KAAIC,SAASC,OAX2C,2DIqI/De,CAA+D4G,IChLxEM,G,4LAGM3H,KAAKF,MAAMqC,SAASC,YACpBpC,KAAKF,MAAMd,QAAQM,KAAK,gB,+BAK5B,OACQ,yBAAKW,UAAU,WACX,yBAAKA,UAAU,yCACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,yBACX,wBAAIA,UAAU,kBAAd,2BACA,uBAAGA,UAAU,QAAb,gEAGA,6BACA,kBAAC,IAAD,CAAMA,UAAU,8BAA8BI,GAAG,aAAjD,WAGA,kBAAC,IAAD,CAAMJ,UAAU,gCAAgCI,GAAG,UAAnD,kB,GAvBdG,aA2CPC,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,CAAyBkH,IC3ClCC,G,YACF,aAAc,IAAD,8BACT,+CACKxG,MAAQ,CACT,SAAY,GACZ,SAAY,GACZ,SAAY,GACZ,gBAAmB,GACnB,OAAS,IAGb,EAAKwB,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBAXP,E,iFAeLP,KAAKF,MAAMqC,SAASC,YACpBpC,KAAKF,MAAMd,QAAQM,KAAK,gB,gDAINwD,GAClBA,EAAUC,QACV/C,KAAKgD,SAAS,CAAED,OAAQD,EAAUC,W,+BAIjCE,GACLA,EAAEI,iBAEF,IAAMwE,EAAU,CACZ,SAAY7H,KAAKoB,MAAM0G,SACvB,SAAY9H,KAAKoB,MAAM2G,SACvB,SAAY/H,KAAKoB,MAAM4G,SACvB,gBAAmBhI,KAAKoB,MAAM6G,iBAGlCjI,KAAKF,MAAMoI,cAAcL,EAAS7H,KAAKF,MAAMd,W,+BAGxCiE,GACLjD,KAAKgD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGpC,IAEEL,EAAW/C,KAAKoB,MAAhB2B,OACR,OACI,yBAAK9C,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,yBAAd,WACA,uBAAGA,UAAU,oBAAb,uBACA,0BAAM4C,SAAU7C,KAAK6C,UACjB,yBAAK5C,UAAU,cACX,2BAAOV,KAAK,OAAOU,UAAWwD,IAAW,+BAA+B,CACxC,aAAcV,EAAOgF,WAGjDrE,YAAY,OAAOP,KAAK,WACxBC,MAAOpD,KAAKoB,MAAM2G,SAAUnF,SAAY5C,KAAK4C,WAC5CG,EAAOgF,UACJ,yBAAK9H,UAAU,oBACV8C,EAAOgF,WAIxB,yBAAK9H,UAAU,cACX,2BAAOV,KAAK,QAAQU,UAAWwD,IAAW,+BAA+B,CACrC,aAAcV,EAAO+E,WAGrDpE,YAAY,gBAAgBP,KAAK,WACjCC,MAAOpD,KAAKoB,MAAM0G,SAAUlF,SAAU5C,KAAK4C,WAClCG,EAAO+E,UACR,yBAAK7H,UAAU,oBACV8C,EAAO+E,WAK5B,yBAAK7H,UAAU,cACX,2BAAOV,KAAK,WAAWU,UAAWwD,IAAW,+BAA+B,CACxC,aAAcV,EAAOiF,WAErDtE,YAAY,WAAWP,KAAK,WAC5BC,MAAOpD,KAAKoB,MAAM4G,SAAUpF,SAAU5C,KAAK4C,WACtCG,EAAOiF,UACJ,yBAAK/H,UAAU,oBACV8C,EAAOiF,WAI5B,yBAAK/H,UAAU,cACX,2BAAOV,KAAK,WAAWU,UAAWwD,IAAW,+BAA+B,CACxC,aAAcV,EAAOkF,kBAErDvE,YAAY,mBAAmBP,KAAK,kBACpCC,MAAOpD,KAAKoB,MAAM6G,gBAAiBrF,SAAU5C,KAAK4C,WACjDG,EAAOkF,iBACJ,yBAAKhI,UAAU,oBACV8C,EAAOkF,kBAIxB,2BAAO1I,KAAK,SAASU,UAAU,yC,GA1GxCO,aA+HRC,gBALS,SAAAW,GAAK,MAAK,CAC9B2B,OAAQ3B,EAAM2B,OACdZ,SAAUf,EAAMe,YAGoB,CAAC+F,cjB/HZ,SAACL,EAAS7I,GAAV,OAAsB,SAAMC,GAAN,SAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAErCE,IAAMC,KAAK,sBAAuBwI,IAFG,OAG3C7I,EAAQM,KAAK,UACbL,EAAS,CACLM,KLTc,aKUdC,QAAQ,KAN+B,gDAS3CP,EAAS,CACLM,KLdc,aKedC,QAAS,KAAIC,SAASC,OAXiB,2DiB+HpCe,CAA0CmH,IC9HnDO,G,YACJ,aAAe,IAAD,8BACZ,+CACK/G,MAAQ,CACX0G,SAAU,GACVE,SAAU,GACVjF,OAAO,IAET,EAAKH,SAAW,EAAKA,SAASrC,KAAd,gBAChB,EAAKsC,SAAW,EAAKA,SAAStC,KAAd,gBARJ,E,iFAYTP,KAAKF,MAAMqC,SAASC,YACrBpC,KAAKF,MAAMd,QAAQM,KAAK,gB,gDAIFwD,GACpBA,EAAUX,SAASC,YACrBpC,KAAKF,MAAMd,QAAQM,KAAK,cAGvBwD,EAAUC,QACX/C,KAAKgD,SAAS,CAACD,OAAQD,EAAUC,W,+BAI5BE,GACPA,EAAEI,iBACF,IAAM+E,EAAe,CACnBN,SAAU9H,KAAKoB,MAAM0G,SACrBE,SAAUhI,KAAKoB,MAAM4G,UAGvBhI,KAAKF,MAAMuI,MAAMD,K,+BAGVnF,GACPjD,KAAKgD,SAAL,eAAiBC,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,U,+BAGlC,IAEDL,EAAU/C,KAAKoB,MAAf2B,OAEP,OACE,yBAAK9C,UAAU,SACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,yBAAd,UACA,0BAAM4C,SAAU7C,KAAK6C,UACnB,yBAAK5C,UAAU,cACb,2BACEV,KAAK,OACLU,UAAWwD,IAAW,+BAA+B,CACnD,aAAcV,EAAO+E,WAEvBpE,YAAY,gBACZP,KAAK,WACLC,MAAOpD,KAAKoB,MAAM0G,SAClBlF,SAAU5C,KAAK4C,WAEhBG,EAAO+E,UACN,yBAAK7H,UAAU,oBACZ8C,EAAO+E,WAId,yBAAK7H,UAAU,cACb,2BACEV,KAAK,WACLU,UAAWwD,IAAW,+BAA+B,CACnD,aAAcV,EAAOiF,WAEvBtE,YAAY,WACZP,KAAK,WACLC,MAAOpD,KAAKoB,MAAM4G,SAClBpF,SAAU5C,KAAK4C,WAEhBG,EAAOiF,UACN,yBAAK/H,UAAU,oBACZ8C,EAAOiF,WAId,2BAAOzI,KAAK,SAASU,UAAU,yC,GAvF3BO,aA4GLC,gBALS,SAAAW,GAAK,MAAK,CAChCe,SAAUf,EAAMe,SAChBY,OAAQ3B,EAAM2B,UAGuB,CAAEsF,MlB7FpB,SAAAD,GAAY,OAAI,SAAMnJ,GAAN,mBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGXE,IAAMC,KAAK,mBAAoB+I,IAHpB,OAGvB9G,EAHuB,OAKtBE,EAASF,EAAI5B,KAAb8B,MAEPK,aAAayG,QAAQ,WAAY9G,GAEjCD,EAAWC,GAEL+G,EAAUC,IAAWhH,GAE3BvC,EAAS,CACLM,KLvBoB,mBKwBpBC,QAAS+I,IAfgB,kDAmB7BtJ,EAAS,CACLM,KLxCc,aKyCdC,QAAS,KAAIC,SAASC,OArBG,4DkB6FtBe,CAAmC0H,I,SCxFnC1H,gBAJS,SAAAW,GAAK,MAAK,CAC9Be,SAAUf,EAAMe,YAGL1B,EArBM,SAAC,GAAD,IAAcD,EAAd,EAAGiI,UAAsBtG,EAAzB,EAAyBA,SAAauG,EAAtC,gDACnB,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAA7I,GAAK,OACa,IAAxBqC,EAASC,WACP,kBAAC5B,EAAcV,GAEf,kBAAC,IAAD,CAAUO,GAAG,kBCUfuI,GAAW/G,aAAa+G,SAE9B,GAAGA,GAAS,CACVrH,EAAWqH,IACX,IAAMC,GAAmBL,IAAWI,IACpCnE,EAAMxF,SAAS,CACbM,KzBhB4B,mByBiB5BC,QAASqJ,KAGX,IAAMC,GAAWC,KAAKC,MAAQ,IAC1BH,GAAiBI,IAAMH,KACzBrE,EAAMxF,SAAS2C,KACflB,OAAOsB,SAASC,KAAO,K,IAmCZiH,G,iLA7BT,OACE,kBAAC,IAAD,CAAUzE,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKxE,UAAU,OACb,kBAAC,EAAD,MAIA,kBAAC,IAAD,CAAOkJ,OAAK,EAACC,KAAK,IAAIX,UAAWd,KACjC,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,YAAYX,UAAWb,KACzC,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,SAASX,UAAWN,KAItC,kBAAC,IAAD,KACE,kBAAC,GAAD,CAAcgB,OAAK,EAACC,KAAK,aAAaX,UAAW1H,IACjD,kBAAC,GAAD,CAAcoI,OAAK,EAACC,KAAK,cAAcX,UAAW9F,IAClD,kBAAC,GAAD,CAAcwG,OAAK,EAACC,KAAK,qBAAqBX,UAAWxD,IACzD,kBAAC,GAAD,CAAckE,OAAK,EAACC,KAAK,oBAAoBX,UAAW/B,KACxD,kBAAC,GAAD,CAAcyC,OAAK,EAACC,KAAK,sBAAsBX,UAAWzB,KAC1D,kBAAC,GAAD,CAAcmC,OAAK,EAACC,KAAK,uCAAuCX,UAAWpB,a,GAtBzE7G,aC3BE6I,QACW,cAA7B3I,OAAOsB,SAASsH,UAEe,UAA7B5I,OAAOsB,SAASsH,UAEhB5I,OAAOsB,SAASsH,SAASpE,MACvB,2DCZNqE,IAASZ,OAAO,kBAAC,GAAD,MAASa,SAASC,eAAe,SD2H3C,kBAAmB/E,WACrBA,UAAUgF,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36eb3ac6.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {GET_ERRORs, GET_PROJECTS, GET_PROJECT, DEL_PROJECT} from './Types';\r\n\r\n\r\nexport const createProject = (project, history) => async dispatch =>{\r\n    try {\r\n        await axios.post\r\n            (\"/api/project\", project);\r\n            history.push(\"/dashboard\") ;\r\n            dispatch({\r\n                type:GET_ERRORs,\r\n                payload:{}\r\n            })   \r\n    } catch (error) {\r\n        dispatch({\r\n            type:GET_ERRORs,\r\n            payload:error.response.data\r\n        })\r\n    }\r\n    ;\r\n};\r\n\r\nexport const getProjects = () => async dispatch => {\r\n    const res = await axios.get(\"/api/project/all\");\r\n    dispatch({\r\n        type: GET_PROJECTS,\r\n        payload: res.data\r\n    });\r\n};\r\n\r\nexport const getProject = (id, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/project/${id}`)\r\n        dispatch({\r\n            type: GET_PROJECT,\r\n            payload: res.data\r\n        });\r\n    } catch (error) {\r\n        history.push(\"/dashboard\");\r\n    }\r\n\r\n};\r\n\r\nexport const delProject = (id) => async dispatch =>{\r\n    if(window.confirm(\"Are you sure you want to delete this project?\")){\r\n        await axios.delete(`/api/project/${id}`)\r\n        dispatch({\r\n            type:DEL_PROJECT,\r\n            payload: id\r\n        })\r\n    }\r\n}\r\n\r\n","//Types for projects\r\nexport const GET_ERRORs = \"GET_ERRORS\";\r\nexport const GET_PROJECTS = \"GET_PROJECTS\";\r\nexport const GET_PROJECT = \"GET_PROJECT\";\r\nexport const DEL_PROJECT = \"DEL_PROJECT\";\r\n\r\n//Types for Backlog\r\nexport const GET_BACKLOG = \"GET_BACKLOG\";\r\nexport const GET_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\nexport const DELETE_PROJECT_TASK = \"GET_PROJECT_TASK\";\r\n\r\n//Types for login/register\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport {delProject} from '../../actions/ProjectActions'\r\n\r\nclass ProjectItem extends Component {\r\n    onDeleteClick = id =>{\r\n        this.props.delProject(id);\r\n    };\r\n    \r\n    render() {\r\n\r\n        const {project} = this.props;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"card card-body bg-light mb-3\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-2\">\r\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-4 col-8\">\r\n                            <h3>{project.projectName}</h3>\r\n                            <p>{project.projDescription}</p>\r\n                        </div>\r\n                        <div className=\"col-md-4 d-none d-lg-block\">\r\n                            <ul className=\"list-group\">\r\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\r\n                                    <li className=\"list-group-item board\">\r\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\r\n                                    </li>\r\n                                </Link>\r\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\r\n                                    <li className=\"list-group-item update\">\r\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\r\n                                    </li>\r\n                                </Link>\r\n                                <li className=\"list-group-item delete\" \r\n                                    onClick={this.onDeleteClick.bind(this, project.projectIdentifier)}>\r\n                                    <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nProjectItem.propTypes={\r\n    delProject: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {delProject})(ProjectItem);","import React from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst CreateProjectButton = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\r\n                Create a Project\r\n            </Link>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CreateProjectButton;","import React, { Component } from 'react'\r\nimport ProjectItem from './Project/ProjectItem'\r\nimport CreateProjectButton from './Project/CreateProjectButton';\r\nimport {connect} from 'react-redux';\r\nimport {getProjects} from '../actions/ProjectActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Dashboard extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getProjects();\r\n    }\r\n\r\n    render() {       \r\n        const {projects} = this.props.project; \r\n        \r\n        return (\r\n            <div className=\"projects\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\">\r\n                            <h1 className=\"display-4 text-center\">Projects</h1>\r\n                                <br />\r\n                                <CreateProjectButton/>\r\n                                <br />\r\n                            <hr />\r\n                            {projects.map(project=>(\r\n                                <ProjectItem key={project.id} project={project}/>\r\n                            ))\r\n                                 \r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDashboard.propTypes = {\r\n    project : PropTypes.object.isRequired,\r\n    getProjects: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project: state.project\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, {getProjects})(Dashboard);\r\n","import axios from 'axios';\r\n\r\nconst setJWToken = token => {\r\n    if(token){\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    }else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setJWToken;","import axios from 'axios';\r\nimport { GET_ERRORs, SET_CURRENT_USER } from './Types';\r\nimport setJWToken from '../SecurityUtils/securityUtils';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nexport const createNewUser = (newUser, history) => async dispatch =>{\r\n    try {\r\n        await axios.post(\"/api/users/register\", newUser);\r\n        history.push(\"/login\");\r\n        dispatch({\r\n            type:GET_ERRORs,\r\n            payload:{}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type:GET_ERRORs,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\nexport const login = LoginRequest => async dispatch =>{\r\n    try {\r\n      //post => login\r\n        const res = await axios.post(\"/api/users/login\", LoginRequest);\r\n    //extract token from res.data\r\n        const {token} = res.data; \r\n    //store the token in local storage\r\n        localStorage.setItem(\"jwtToken\", token);\r\n    //set token in the headers\r\n        setJWToken(token);\r\n    //decode within react\r\n        const decoded = jwt_decode(token);\r\n    //dispatch to our securityReducer\r\n        dispatch({\r\n            type:SET_CURRENT_USER,\r\n            payload: decoded\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload: err.response.data\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const logout = () => dispatch => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setJWToken(false);\r\n    dispatch({\r\n        type: SET_CURRENT_USER,\r\n        payload: {}\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {logout} from '../../actions/SecurityActions';\r\n\r\nclass Header extends Component {\r\n    \r\n    logout(){\r\n        this.props.logout();\r\n        window.location.href = \"/\";\r\n    }\r\n    \r\n    render() {\r\n\r\n        const {validToken, user} = this.props.security;\r\n\r\n        const userIsAuthenticated = (\r\n             <div className = \"collapse navbar-collapse\" id = \"mobile-nav\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/dashboard\">\r\n                            Dashboard\r\n                            </Link>\r\n                    </li>\r\n                </ul>\r\n\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link \" to=\"/dashboard\">\r\n                            <i className=\"fas.fa-user-circle.mr-1\"/>  {user.fullname}\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/logout\" \r\n                               onClick={this.logout.bind(this)}>\r\n                            Logout\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n             </div>\r\n        );\r\n\r\n        const userNotAuthenticated = (\r\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link \" to=\"/register\">\r\n                            Sign Up\r\n                        </Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/login\">\r\n                            Login\r\n                        </Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n\r\n        let headerLinks;\r\n\r\n        if(validToken && user){\r\n            headerLinks = userIsAuthenticated;\r\n        } else {\r\n            headerLinks = userNotAuthenticated;\r\n        }\r\n\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\r\n            <div className=\"container\">\r\n                <Link className=\"navbar-brand\" to=\"/\">\r\n                    Chris Diaz Proj. Management Tool\r\n                </Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                    <span className=\"navbar-toggler-icon\" />\r\n                </button>\r\n                {headerLinks}\r\n               \r\n            </div>\r\n        </nav>\r\n        )\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n});\r\n\r\nexport default connect(mapStateToProps, {logout})(Header);","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport {createProject} from '../../actions/ProjectActions';\r\nimport classnames from 'classnames';\r\n\r\nclass AddProject extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            \"projectName\": \"\",\r\n            \"projectIdentifier\": \"\",\r\n            \"projDescription\": \"\",\r\n            \"startDate\": \"\",\r\n            \"endDate\": \"\",\r\n            \"errors\":{}\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({\r\n                errors:nextProps.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e){\r\n        \r\n        e.preventDefault();\r\n        const newProj = {\r\n            \"projectName\": this.state.projectName,\r\n            \"projectIdentifier\": this.state.projectIdentifier,\r\n            \"projDescription\": this.state.projDescription,\r\n            \"startDate\": this.state.startDate,\r\n            \"endDate\": this.state.endDate\r\n        };\r\n        this.props.createProject(newProj, this.props.history);\r\n    }\r\n\r\n    render() {\r\n\r\n        const{errors} = this.state;\r\n        return (\r\n            <div>\r\n                <div className=\"project\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <h5 className=\"display-4 text-center\">Create Project form</h5>\r\n                                <hr />\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                       <input type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg\", {\r\n                                            \"is-invalid\":errors.projectName\r\n                                        })} \r\n                                        placeholder=\"Project Name\" name=\"projectName\" \r\n                                        value={this.state.projectName}\r\n                                        onChange={this.onChange}/>\r\n                                        {errors.projectName && (\r\n                                            <div className=\"invalid-feedback\">\r\n                                                {errors.projectName}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" \r\n                                        className={classnames(\"form-control form-control-lg\",{\r\n                                            \"is-invalid\":errors.projectIdentifier\r\n                                        })}\r\n                                        placeholder=\"Unique Project ID\" name=\"projectIdentifier\"\r\n                                        value={this.state.projectIdentifier}\r\n                                        onChange={this.onChange}/>\r\n                                        {errors.projectIdentifier &&(\r\n                                            <div className=\"invalid-feedback\">\r\n                                                {errors.projectIdentifier}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <textarea \r\n                                         className={classnames(\"form-control form-control-lg\",{\r\n                                             \"is-invalid\":errors.projDescription\r\n                                         })} \r\n                                         placeholder=\"Project Description\" name=\"projDescription\"\r\n                                         value={this.state.projDescription}\r\n                                         onChange={this.onChange}></textarea>\r\n                                         {errors.projDescription && (\r\n                                             <div className=\"invalid-feedback\">\r\n                                                 {errors.projDescription}\r\n                                             </div>\r\n                                         )}\r\n                                    </div>\r\n                                    <h6>Start Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"date\" className=\"form-control form-control-lg\" \r\n                                        name=\"startDate\" value={this.state.startDate}\r\n                                        onChange={this.onChange}/>\r\n                                    </div>\r\n                                    <h6>Estimated End Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"date\" className=\"form-control form-control-lg\" \r\n                                        name=\"endDate\" value={this.state.endDate} \r\n                                        onChange={this.onChange}/>\r\n                                    </div>\r\n\r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddProject.propTypes = {\r\n    createProject : PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    errors: state.errors\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {createProject})(AddProject);","import {GET_ERRORs} from '../actions/Types';\r\n\r\nconst initState = {};\r\n\r\nexport default function(state=initState, action){\r\n    switch(action.type){\r\n        \r\n        case GET_ERRORs:\r\n            return action.payload;\r\n        \r\n        default:\r\n            return state;\r\n    }\r\n}","import {GET_PROJECTS, GET_PROJECT, DEL_PROJECT} from '../actions/Types';\r\n\r\nconst initialState = {\r\n    projects:[],\r\n    project:{}\r\n};\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case GET_PROJECTS:\r\n            return {\r\n                ...state,\r\n                projects: action.payload\r\n            };\r\n        case GET_PROJECT:\r\n            return {\r\n                ...state,\r\n                project: action.payload\r\n            };\r\n        case DEL_PROJECT:\r\n            return{\r\n                ...state,\r\n                projects: state.projects.filter(\r\n                    project => project.projectIdentifier !== action.payload\r\n                    )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_BACKLOG,\r\n    GET_PROJECT_TASK,\r\n    DELETE_PROJECT_TASK\r\n} from '../actions/Types';\r\n\r\n\r\nconst initialState = {\r\n    project_tasks: [],\r\n    project_task: {},\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n        case GET_BACKLOG:\r\n            return {\r\n                ...state,\r\n                project_tasks: action.payload\r\n            };\r\n\r\n        case GET_PROJECT_TASK:\r\n            return {\r\n                ...state,\r\n                project_task: action.payload\r\n            };\r\n\r\n        case DELETE_PROJECT_TASK:\r\n            return {\r\n                ...state,\r\n                project_tasks: state.project_tasks.filter(\r\n                    project_task =>project_task.projSequence !== action.payload\r\n                )\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {SET_CURRENT_USER} from '../actions/Types';\r\n\r\nconst initialState = {\r\n    validToken: false,\r\n    user: {}\r\n};\r\n\r\nconst booleanActionPayload = payload => {\r\n    if(payload){\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default function(state= initialState, action){\r\n    switch (action.type){\r\n    \r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                validToken: booleanActionPayload(action.payload),\r\n                user: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    combineReducers\r\n} from 'redux';\r\nimport errorReducer from './errorReducer';\r\nimport projectReducer from './projectReducer';\r\nimport backlogReducer from './backlogReducer';\r\nimport securityReducer from './securityReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    errors: errorReducer,\r\n    project: projectReducer,\r\n    backlog: backlogReducer,\r\n    security: securityReducer\r\n});","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nlet store;\r\n\r\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__();\r\n\r\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState, \r\n        compose(\r\n            applyMiddleware(...middleware),\r\n            ReactReduxDevTools\r\n        ) \r\n    );\r\n} else {\r\n    store = createStore(\r\n        rootReducer, \r\n        initialState, \r\n        compose(applyMiddleware(...middleware)) \r\n    );\r\n}\r\n\r\n\r\n/** \r\n window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() \r\n \r\n*/\r\nexport default store;","import React, { Component } from 'react'\r\nimport {getProject, createProject} from '../../actions/ProjectActions';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\n\r\nclass UpdateProject extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            \"id\":\"\",\r\n            \"projectName\": \"\",\r\n            \"projectIdentifier\": \"\",\r\n            \"projDescription\": \"\",\r\n            \"startDate\": \"\",\r\n            \"endDate\": \"\",\r\n            errors:{}\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);    \r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    \r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n        const {\r\n            id,\r\n            projectName,\r\n            projectIdentifier,\r\n            projDescription,\r\n            startDate,\r\n            endDate\r\n        } = nextProps.project;\r\n\r\n        this.setState({\r\n            id,\r\n            projectName,\r\n            projectIdentifier,\r\n            projDescription,\r\n            startDate,\r\n            endDate\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        this.props.getProject(id, this.props.history);\r\n    }\r\n    \r\n    onChange(e){\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n        const updateProject = {\r\n            id: this.state.id,\r\n            projectName: this.state.projectName,\r\n            projectIdentifier: this.state.projectIdentifier,\r\n            projDescription: this.state.projDescription,\r\n            startDate: this.state.startDate,\r\n            endDate: this.state.endDate\r\n        };\r\n\r\n        this.props.createProject(updateProject, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        return  (\r\n            <div className=\"project\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h5 className=\"display-4 text-center\"> Update Project form</h5>\r\n                            <hr />\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" \r\n                                    className={classnames(\"form-control form-control-lg \",{\r\n                                        \"is-invalid\":errors.projectName\r\n                                    })} \r\n                                    placeholder=\"Project Name\"\r\n                                    name=\"projectName\"\r\n                                    value={this.state.projectName} \r\n                                    onChange={this.onChange}/>{\r\n                                        errors.projectName && (\r\n                                        <div className=\"invalid-feedback\">{errors.projectName}</div>\r\n                                    )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" className=\"form-control form-control-lg\" placeholder=\"Unique Project ID\"\r\n                                     name=\"projectIdentifier\"\r\n                                     value={this.state.projectIdentifier}\r\n                                        disabled />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <textarea \r\n                                    className={classnames(\"form-control form-control-lg\",{\r\n                                        \"is-invalid\":errors.projDescription\r\n                                    })} placeholder=\"Project Description\"\r\n                                    name=\"projDescription\"\r\n                                    value={this.state.projDescription}\r\n                                    onChange={this.onChange}/>\r\n                                    {errors.projDescription && (\r\n                                            <div className=\"invalid-feedback\">{errors.projDescription}</div>\r\n                                        )}\r\n                                </div>\r\n                                <h6>Start Date</h6>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \r\n                                    name=\"startDate\" \r\n                                    value={this.state.startDate}\r\n                                    onChange={this.onChange}/>\r\n                                </div>\r\n                                <h6>Estimated End Date</h6>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"date\" className=\"form-control form-control-lg\" \r\n                                    name=\"endDate\"\r\n                                    value={this.state.endDate} \r\n                                    onChange={this.onChange}/>\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )   \r\n    }\r\n}\r\n\r\nUpdateProject.propTypes = {\r\n    getProject: PropTypes.func.isRequired,\r\n    createProject: PropTypes.func.isRequired,\r\n    project: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project: state.project.project,\r\n    errors: state.errors\r\n})\r\n\r\nexport default connect(mapStateToProps,{getProject, createProject})(UpdateProject);","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { delProjectTask} from '../../../actions/BacklogActions';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nclass ProjectTask extends Component {\r\n    \r\n    onDeleteClick(backlog_id, ptid) {\r\n        this.props.delProjectTask(backlog_id,ptid);\r\n    }\r\n    \r\n    render() {\r\n\r\n        const {project_task} = this.props;\r\n\r\n        let priorityString;\r\n        let priorityClass;\r\n\r\n        if(project_task.priority === 1){\r\n            priorityClass = \"bg-danger text-light\";\r\n            priorityString = \"HIGH\";\r\n        }\r\n        if (project_task.priority === 2) {\r\n            priorityClass = \"bg-warning text-light\";\r\n            priorityString = \"MEDIUM\";\r\n        }\r\n\r\n        if (project_task.priority === 3) {\r\n            priorityClass = \"bg-info text-light\";\r\n            priorityString = \"LOW\";\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"card mb-1 bg-light\">\r\n                    <div className={`card-header text-primary ${priorityClass}`}>\r\n                        ID: {project_task.projSequence} -- Priority: {priorityString}\r\n                    </div>\r\n                    <div className=\"card-body bg-light\">\r\n                        <h5 className=\"card-title\">{project_task.summary}</h5>\r\n                        <p className=\"card-text text-truncate \">\r\n                            {project_task.acceptanceCriteria}\r\n                                        </p>\r\n                        <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projSequence}`} \r\n                          className=\"btn btn-primary\">View / Update</Link>\r\n\r\n                        <button className=\"btn btn-danger ml-4\"\r\n                        onClick={this.onDeleteClick.bind(this,project_task.projectIdentifier, \r\n                                                            project_task.projSequence)}>Delete</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nProjectTask.propTypes = {\r\n    delProjectTask: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null,{delProjectTask})(ProjectTask);","import axios from 'axios';\r\nimport {GET_ERRORs, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK} from './Types';\r\n\r\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch =>{\r\n\r\n    try {\r\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\r\n        history.push(`/projectBoard/${backlog_id}`);\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload: {}\r\n        })   \r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport const getBacklog = backlog_id => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\r\n        dispatch({\r\n            type: GET_BACKLOG,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nexport const getProjectTask= (backlog_id, ptId, history) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`/api/backlog/${backlog_id}/${ptId}`)\r\n        dispatch({\r\n            type: GET_PROJECT_TASK,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        history.push(\"/dashboard\");\r\n    }\r\n}\r\n\r\nexport const updateProjectTask = (backlog_id, ptId, project_task, history) => async  dispatch =>{\r\n    try {\r\n        await axios.patch(`/api/backlog/${backlog_id}/${ptId}`, project_task);\r\n        history.push(`/projectboard/${backlog_id}`);\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload:{}\r\n        });\r\n    } catch (err) {\r\n        dispatch({\r\n            type: GET_ERRORs,\r\n            payload:  err.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport const delProjectTask = (backlog_id, ptId) => async dispatch => {\r\n    if (window.confirm(`You are deleting task ${ptId}, are you sure you want to proceed?`)) {\r\n        await axios.delete(`/api/backlog/${backlog_id}/${ptId}`);\r\n        dispatch({\r\n            type: DELETE_PROJECT_TASK,\r\n            payload: ptId\r\n        });\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport ProjectTask from './ProjectTasks/ProjectTask';\r\n\r\nclass Backlog extends Component {\r\n    render() {\r\n        \r\n        const {project_tasks_props}= this.props;\r\n        \r\n        const tasks = project_tasks_props.map(project_task =>(\r\n            <ProjectTask key={project_task.id} project_task={project_task}/> \r\n        ))\r\n        \r\n        let todoItems = [];\r\n        let inProgressitems = [];\r\n        let doneItems = [];\r\n        \r\n        for(let i=0; i<tasks.length; i++){\r\n            \r\n            if(tasks[i].props.project_task.status === \"TO_DO\"){\r\n                todoItems.push(tasks[i]);\r\n            }\r\n            if (tasks[i].props.project_task.status === \"IN_PROGRESS\"){\r\n                inProgressitems.push(tasks[i]);\r\n            }\r\n            if (tasks[i].props.project_task.status === \"DONE\"){\r\n                doneItems.push(tasks[i]);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card text-center mb-2\">\r\n                                <div className=\"card-header bg-secondary text-white\">\r\n                                    <h3>TO DO</h3>\r\n                                </div>\r\n                            </div>\r\n                            {todoItems}\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card text-center mb-2\">\r\n                                <div className=\"card-header bg-primary text-white\">\r\n                                    <h3>In Progress</h3>\r\n                                </div>\r\n                            </div>\r\n                            {inProgressitems}\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <div className=\"card text-center mb-2\">\r\n                                <div className=\"card-header bg-success text-white\">\r\n                                    <h3>Done</h3>\r\n                                </div>\r\n                            </div>\r\n                            {doneItems}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Backlog;","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Backlog from './Backlog';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {getBacklog} from '../../actions/BacklogActions';\r\n\r\nclass ProjectBoard extends Component {\r\n   constructor(){\r\n       super();\r\n       this.state={\r\n           errors:{}\r\n       };\r\n   }\r\n\r\n    componentDidMount(){\r\n        const {id} = this.props.match.params;\r\n        this.props.getBacklog(id);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if(nextProps.errors){\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id} = this.props.match.params;\r\n        const {project_tasks} = this.props.backlog;\r\n        const {errors} = this.state;\r\n\r\n        let boardContent;\r\n        const boardAlgorithm = (errors, project_tasks) => {\r\n            if (project_tasks.length<1){\r\n                if (errors.projectNotFound){\r\n                    return(\r\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                            {errors.projectNotFound}\r\n                        </div>\r\n                    );\r\n                } \r\n                else if (errors.projectIdentifier) {\r\n                    return (\r\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                            {errors.projectIdentifier}\r\n                        </div>\r\n                    );\r\n                }\r\n\r\n                else {\r\n                    return (\r\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\r\n                            No Project Tasks Found on this Board\r\n                        </div>\r\n                    );\r\n                }\r\n            } \r\n            else{\r\n                return <Backlog project_tasks_props={project_tasks} />;\r\n            }\r\n        }\r\n\r\n        boardContent = boardAlgorithm(errors, project_tasks);\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"container\">\r\n                    <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\r\n                        <i className=\"fas fa-plus-circle\"> Create Project Task</i>\r\n                    </Link>\r\n                    <br />\r\n                    <hr />\r\n                    {boardContent}\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nProjectBoard.propTypes = {\r\n    backlog: PropTypes.object.isRequired,\r\n    getBacklog: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    backlog: state.backlog,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, {getBacklog})(ProjectBoard);","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport classnames from 'classnames'\r\nimport {addProjectTask} from '../../../actions/BacklogActions';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddProjectTask extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n\r\n        const {id} = this.props.match.params;\r\n\r\n        this.state = {\r\n            \"summary\": \"\",\r\n            \"acceptCriteria\": \"\",\r\n            \"status\": \"\",\r\n            \"priority\": 0,\r\n            \"dueDate\": \"\",\r\n            \"projectIdentifier\":id,\r\n            \"errors\":{}\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({\r\n                errors: nextProps.errors\r\n            });\r\n        }\r\n    }\r\n\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const newProjTask = {\r\n            \"summary\": this.state.summary,\r\n            \"acceptCriteria\": this.state.acceptCriteria,\r\n            \"status\": this.state.status,\r\n            \"priority\": this.state.priority,\r\n            \"dueDate\": this.state.dueDate,\r\n        };\r\n\r\n        this.props.addProjectTask(this.state.projectIdentifier, newProjTask, this.props.history);\r\n    }\r\n    \r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n                <div>\r\n                {\r\n                    //<!-- CREATE / UPDATE PROJECT TASK FORM STARTS HERE -->\r\n                }\r\n                <div className=\"add-PBI\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <Link to={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\r\n                                    Back to Project Board\r\n                                </Link>\r\n                                <h4 className=\"display-4 text-center\">Add Project Task</h4>\r\n                                <p className=\"lead text-center\">Project Name + Project Code</p>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" \r\n                                           className={classnames(\"form-control form-control-lg\",{\r\n                                               \"is-invalid\": errors.summary\r\n                                           })} name=\"summary\" \r\n                                            placeholder=\"Project Task summary\" value={this.state.summary} \r\n                                            onChange={this.onChange}\r\n                                        />{errors.summary && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                {errors.summary}\r\n                                                </div>\r\n                                              )}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea className=\"form-control form-control-lg\" \r\n                                            placeholder=\"Acceptance Criteria\" name=\"acceptCriteria\" \r\n                                            value={this.state.acceptCriteria} onChange={this.onChange}>\r\n                                            </textarea>\r\n                                    </div>\r\n                                    <h6>Due Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"date\" className=\"form-control form-control-lg\" name=\"dueDate\" \r\n                                            value={this.state.dueDate} onChange={this.onChange}/>\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                            <select className=\"form-control form-control-lg\" name=\"priority\" \r\n                                            value={this.state.priority} onChange={this.onChange}>\r\n                                            <option value={0}>Select Priority</option>\r\n                                            <option value={1}>High</option>\r\n                                            <option value={2}>Medium</option>\r\n                                            <option value={3}>Low</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                            <select className=\"form-control form-control-lg\" name=\"status\" \r\n                                            value={this.state.status} onChange={this.onChange}>\r\n                                            <option value=\"\">Select Status</option>\r\n                                            <option value=\"TO_DO\">TO DO</option>\r\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                            <option value=\"DONE\">DONE</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    //<!-- CREATE / UPDATE PROJECT TASK FORM ENDS HERE -->\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nAddProjectTask.propTypes = {\r\n    addProjectTask: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    errors: state.errors\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, {addProjectTask})(AddProjectTask);\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport { getProjectTask, updateProjectTask } from '../../../actions/BacklogActions';\r\n\r\nclass UpdateProjectTask extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: \"\",\r\n            projSequence: \"\",\r\n            summary: \"\",\r\n            acceptCriteria: \"\",\r\n            status: \"\",\r\n            priority: \"\",\r\n            dueDate: \"\",\r\n            projectIdentifier: \"\",\r\n            createDate: \"\", \r\n            errors:{}\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this); \r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        \r\n        if(nextProps.errors){\r\n            this.setState({errors: nextProps.errors});\r\n        }\r\n        \r\n        const {\r\n            id,\r\n            projSequence,\r\n            summary,\r\n            acceptCriteria,\r\n            status,\r\n            priority,\r\n            dueDate,\r\n            projectIdentifier,\r\n            createDate\r\n        } = nextProps.project_task;\r\n\r\n        this.setState({\r\n            id,\r\n            projSequence,\r\n            summary,\r\n            acceptCriteria,\r\n            status,\r\n            priority,\r\n            dueDate,\r\n            projectIdentifier,\r\n            createDate\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {backlog_id, ptId} = this.props.match.params;\r\n        this.props.getProjectTask(backlog_id, ptId, this.props.history);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const updateProjTask =  {\r\n            id: this.state.id,\r\n            projSequence: this.state.projSequence,\r\n            summary: this.state.summary,\r\n            acceptCriteria: this.state.acceptCriteria,\r\n            status: this.state.status,\r\n            priority: this.state.priority,\r\n            dueDate: this.state.dueDate,\r\n            projectIdentifier: this.state.projectIdentifier,\r\n            createDate: this.state.createDate\r\n        }\r\n\r\n        //axios.patch call here\r\n        //console.log(updateProjTask);\r\n        this.props.updateProjectTask(\r\n            this.state.projectIdentifier, \r\n            this.state.projSequence,\r\n            updateProjTask, \r\n            this.props.history);\r\n\r\n    }\r\n\r\n    render() {\r\n        const {errors} = this.state;\r\n        \r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"add-PBI\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <Link to={`/projectboard/${this.state.projectIdentifier}`}className=\"btn btn-light\">\r\n                                    Back to Project Board\r\n                                </Link>\r\n                                <h4 className=\"display-4 text-center\">Update Project Task</h4>\r\n                                <p className=\"lead text-center\">\r\n                                    Project Name: {this.state.projectIdentifier} | \r\n                                    Project Task ID:{\" \"} {this.state.projSequence}</p>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"text\" \r\n                                            className={classnames(\"form-control form-control-lg\",{\r\n                                                \"is-invalid\": errors.summary\r\n                                            })}\r\n                                         name=\"summary\" value={this.state.summary} \r\n                                         onChange = {this.onChange}\r\n                                         placeholder=\"Project Task summary\" \r\n                                         />{errors.summary && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                    {errors.summary}\r\n                                                </div>\r\n                                            )}\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <textarea className=\"form-control form-control-lg\" \r\n                                         placeholder=\"Acceptance Criteria\" \r\n                                            name=\"acceptCriteria\"value={this.state.acceptCriteria}\r\n                                            onChange={this.onChange}></textarea>\r\n                                    </div>\r\n                                    <h6>Due Date</h6>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"date\" className=\"form-control form-control-lg\" \r\n                                         name=\"dueDate\" value={this.state.dueDate}\r\n                                         onChange= {this.onChange} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <select className=\"form-control form-control-lg\" \r\n                                         name=\"priority\" value={this.state.priority}\r\n                                         onChange={this.onChange}>\r\n                                            <option value={0}>Select Priority</option>\r\n                                            <option value={1}>High</option>\r\n                                            <option value={2}>Medium</option>\r\n                                            <option value={3}>Low</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <select className=\"form-control form-control-lg\" name=\"status\"\r\n                                         value={this.state.status} onChange={this.onChange}>\r\n                                            <option value=\"\">Select Status</option>\r\n                                            <option value=\"TO_DO\">TO DO</option>\r\n                                            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\r\n                                            <option value=\"DONE\">DONE</option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nUpdateProjectTask.propTypes = {\r\n    getProjectTask: PropTypes.func.isRequired,\r\n    project_task: PropTypes.object.isRequired,\r\n    updateProjectTask: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    project_task: state.backlog.project_task,\r\n    errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps, { getProjectTask, updateProjectTask})(UpdateProjectTask);","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Landing extends Component {\r\n\r\n    componentDidMount() {\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <div className=\"landing\">\r\n                    <div className=\"light-overlay landing-inner text-dark\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-12 text-center\">\r\n                                    <h1 className=\"display-3 mb-4\">My Proj Management Tool</h1>\r\n                                    <p className=\"lead\">\r\n                                        Create your account to join active projects or start you own\r\n                                    </p>\r\n                                    <hr />\r\n                                    <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\r\n                                        Sign Up\r\n                                    </Link>\r\n                                    <Link className=\"btn btn-lg btn-secondary mr-2\" to=\"/login\">\r\n                                        Login\r\n                                    </Link>                                            \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n})\r\n\r\nexport default connect(mapStateToProps)(Landing);","import React, { Component } from 'react';\r\nimport {createNewUser} from '../../actions/SecurityActions';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\nclass Register extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            \"username\": \"\",\r\n            \"fullName\": \"\",\r\n            \"password\": \"\",\r\n            \"confirmPassword\": \"\",\r\n            \"errors\":{}\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.security.validToken) {\r\n            this.props.history.push(\"/dashboard\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const newUser = {\r\n            \"username\": this.state.username,\r\n            \"fullName\": this.state.fullName,\r\n            \"password\": this.state.password,\r\n            \"confirmPassword\": this.state.confirmPassword\r\n        };\r\n\r\n        this.props.createNewUser(newUser, this.props.history);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n    \r\n    render() {\r\n\r\n        const { errors } = this.state;\r\n        return (        \r\n            <div className=\"register\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-8 m-auto\">\r\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n                            <p className=\"lead text-center\">Create your Account</p>\r\n                            <form onSubmit={this.onSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"text\" className={classnames(\"form-control form-control-lg\",{\r\n                                                                    \"is-invalid\": errors.fullName\r\n                                                                    })\r\n                                                                }\r\n                                        placeholder=\"Name\" name=\"fullName\" \r\n                                        value={this.state.fullName} onChange = {this.onChange} />\r\n                                        {errors.fullName && (\r\n                                            <div className=\"invalid-feedback\">\r\n                                                {errors.fullName}\r\n                                            </div>\r\n                                        )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"email\" className={classnames(\"form-control form-control-lg\",{\r\n                                                                        \"is-invalid\": errors.username\r\n                                                                        })\r\n                                                                    } \r\n                                        placeholder=\"Email Address\" name=\"username\" \r\n                                        value={this.state.username} onChange={this.onChange} />\r\n                                                {errors.username && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                    {errors.username}\r\n                                                </div>\r\n                                            )}\r\n\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\",{\r\n                                                                        \"is-invalid\": errors.password\r\n                                                                    })}\r\n                                        placeholder=\"Password\" name=\"password\" \r\n                                        value={this.state.password} onChange={this.onChange}/>\r\n                                            {errors.password && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                    {errors.password}\r\n                                                </div>\r\n                                            )}\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <input type=\"password\" className={classnames(\"form-control form-control-lg\",{\r\n                                                                        \"is-invalid\": errors.confirmPassword\r\n                                                                    })} \r\n                                        placeholder=\"Confirm Password\" name=\"confirmPassword\" \r\n                                        value={this.state.confirmPassword} onChange={this.onChange} />\r\n                                        {errors.confirmPassword && (\r\n                                            <div className=\"invalid-feedback\">\r\n                                                {errors.confirmPassword}\r\n                                            </div>\r\n                                        )}\r\n                                </div>\r\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRegister.propTypes = {\r\n    createNewUser: PropTypes.func.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n    security: PropTypes.object.isRequired\r\n};\r\n\r\nconst MapStateToProps = state => ({\r\n    errors: state.errors,\r\n    security: state.security\r\n});\r\n\r\nexport default connect(MapStateToProps, {createNewUser})(Register);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\nimport classnames from 'classnames';\r\nimport {login} from '../../actions/SecurityActions';\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      errors:{}\r\n    };\r\n    this.onChange = this.onChange.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    if(this.props.security.validToken){\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.security.validToken) {\r\n      this.props.history.push(\"/dashboard\");\r\n    }\r\n\r\n    if(nextProps.errors){\r\n      this.setState({errors: nextProps.errors});\r\n    }\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault();\r\n    const LoginRequest = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    };\r\n\r\n    this.props.login(LoginRequest);\r\n  }\r\n\r\n  onChange(e) {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  render() {\r\n\r\n    const {errors} = this.state;\r\n\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-8 m-auto\">\r\n              <h1 className=\"display-4 text-center\">Log In</h1>\r\n              <form onSubmit={this.onSubmit}>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"text\"\r\n                    className={classnames(\"form-control form-control-lg\",{\r\n                      \"is-invalid\": errors.username\r\n                    })}\r\n                    placeholder=\"Email Address\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.username && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.username}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    className={classnames(\"form-control form-control-lg\",{\r\n                      \"is-invalid\": errors.password\r\n                    })}\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  {errors.password && (\r\n                    <div className=\"invalid-feedback\">\r\n                      {errors.password}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLogin.propTypes = {\r\n  login: PropTypes.func.isRequired,\r\n  errors: PropTypes.object.isRequired,\r\n  security: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  security: state.security,\r\n  errors: state.errors\r\n});\r\n\r\nexport default connect(mapStateToProps,{ login })(Login);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SecuredRoute = ({ component: Component, security, ...otherProps }) => (\r\n  <Route\r\n    {...otherProps}\r\n    render={props =>\r\n      security.validToken === true ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect to=\"/login\" />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nSecuredRoute.propTypes = {\r\n    security: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    security: state.security\r\n});\r\n\r\nexport default connect(mapStateToProps)(SecuredRoute);","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Dashboard from './Components/Dashboard';\r\nimport Header from './Components/Layout/Header';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport AddProject from './Components/Project/AddProject';\r\nimport {Provider} from 'react-redux';\r\nimport store from './store';\r\nimport UpdateProject from './Components/Project/UpdateProject';\r\nimport ProjectBoard from './Components/ProjectBoard/ProjectBoard';\r\nimport AddProjectTask from './Components/ProjectBoard/ProjectTasks/AddProjectTask';\r\nimport UpdateProjectTask from './Components/ProjectBoard/ProjectTasks/UpdateProjectTask';\r\nimport Landing from './Components/Layout/Landing';\r\nimport Register from './Components/UserManagement/Register';\r\nimport Login from './Components/UserManagement/Login';\r\nimport jwt_decode from 'jwt-decode';\r\nimport setJWToken from './SecurityUtils/securityUtils';\r\nimport { SET_CURRENT_USER } from './actions/Types';\r\nimport { logout } from './actions/SecurityActions';\r\nimport SecuredRoute from './SecurityUtils/SecureRoute';\r\n\r\nconst jwtToken = localStorage.jwtToken;\r\n\r\nif(jwtToken){\r\n  setJWToken(jwtToken);\r\n  const decoded_jwtToken = jwt_decode(jwtToken);\r\n  store.dispatch({\r\n    type: SET_CURRENT_USER,\r\n    payload: decoded_jwtToken\r\n  });\r\n\r\n  const currTime = Date.now() / 1000;\r\n  if (decoded_jwtToken.exp < currTime) {\r\n    store.dispatch(logout());\r\n    window.location.href = \"/\";\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  render(){\r\n      return (\r\n        <Provider store={store}>\r\n          <Router>\r\n            <div className=\"App\">\r\n              <Header/>\r\n              {\r\n                //public routes\r\n              }\r\n              <Route exact path=\"/\" component={Landing} />\r\n              <Route exact path=\"/register\" component={Register}/>\r\n              <Route exact path=\"/login\" component={Login}/>\r\n              {\r\n                //private routes upon login\r\n              }\r\n              <Switch>\r\n                <SecuredRoute exact path=\"/dashboard\" component={Dashboard}/>\r\n                <SecuredRoute exact path=\"/addProject\" component={AddProject}/>\r\n                <SecuredRoute exact path=\"/updateProject/:id\" component={UpdateProject} />\r\n                <SecuredRoute exact path=\"/projectBoard/:id\" component={ProjectBoard} /> \r\n                <SecuredRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask}/>\r\n                <SecuredRoute exact path=\"/UpdateProjectTask/:backlog_id/:ptId\" component={UpdateProjectTask}/>\r\n              </Switch>\r\n            </div>\r\n          </Router>\r\n        </Provider>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}